
import React, { useState, useEffect } from 'react';
import { X, Download, Copy, Check } from 'lucide-react';
import { geminiFlashService, AgenticContent } from '@/services/geminiFlashService';
import { generateQRCode, generateContentUrl } from '@/utils/qrCodeGenerator';
import { toast } from 'sonner';

interface AgenticModeOverlayProps {
  isOpen: boolean;
  onClose: () => void;
  task: string;
  contentType: string;
}

const AgenticModeOverlay: React.FC<AgenticModeOverlayProps> = ({
  isOpen,
  onClose,
  task,
  contentType
}) => {
  const [content, setContent] = useState<AgenticContent | null>(null);
  const [loading, setLoading] = useState(false);
  const [qrCodeUrl, setQrCodeUrl] = useState<string>('');
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    if (isOpen && task) {
      generateContent();
    }
  }, [isOpen, task]);

  const generateContent = async () => {
    setLoading(true);
    try {
      const generatedContent = await geminiFlashService.generateContent(task, contentType);
      setContent(generatedContent);
      
      // Generate QR code with mobile-friendly URL
      const contentUrl = generateContentUrl(generatedContent.formattedContent);
      const qrUrl = generateQRCode(contentUrl);
      setQrCodeUrl(qrUrl);
      
      toast.success('Content generated successfully!');
    } catch (error) {
      console.error('Error generating content:', error);
      toast.error('Failed to generate content. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = async () => {
    if (content) {
      try {
        await navigator.clipboard.writeText(content.content);
        setCopied(true);
        toast.success('Content copied to clipboard!');
        setTimeout(() => setCopied(false), 2000);
      } catch (error) {
        toast.error('Failed to copy content');
      }
    }
  };

  const downloadContent = () => {
    if (content) {
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>${content.title}</title>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <style>
            body { 
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
              max-width: 800px; 
              margin: 0 auto; 
              padding: 40px 20px; 
              line-height: 1.6;
              color: #333;
            }
            h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
            h2 { color: #34495e; margin-top: 30px; }
            h3 { color: #7f8c8d; }
            .content { background: #f8f9fa; padding: 30px; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            strong { color: #2c3e50; }
            em { color: #7f8c8d; }
            li { margin-bottom: 8px; }
          </style>
        </head>
        <body>
          <h1>${content.title}</h1>
          <div class="content">
            ${content.formattedContent}
          </div>
        </body>
        </html>
      `;
      
      const blob = new Blob([htmlContent], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${content.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.html`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      toast.success('Content downloaded successfully!');
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 bg-black/90 backdrop-blur-sm">
      <div className="absolute inset-0 flex items-center justify-center p-4">
        <div className="bg-gray-900 rounded-lg shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden border border-gray-700">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-700">
            <div className="flex-1">
              <h2 className="text-2xl font-bold text-white">
                {loading ? 'Generating Content...' : content?.title || 'Agentic Mode'}
              </h2>
              <p className="text-gray-400 mt-1 text-sm">
                {contentType.charAt(0).toUpperCase() + contentType.slice(1)} â€¢ Generated by AI
              </p>
            </div>
            
            {/* QR Code */}
            {qrCodeUrl && !loading && (
              <div className="flex flex-col items-center mx-6">
                <img 
                  src={qrCodeUrl} 
                  alt="QR Code for mobile view" 
                  className="w-20 h-20 border-2 border-white rounded-lg"
                />
                <p className="text-xs text-gray-400 mt-1 text-center">
                  Scan to view<br/>on mobile
                </p>
              </div>
            )}
            
            {/* Action Buttons */}
            <div className="flex items-center gap-2">
              {content && !loading && (
                <>
                  <button
                    onClick={copyToClipboard}
                    className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"
                    title="Copy to clipboard"
                  >
                    {copied ? <Check size={20} /> : <Copy size={20} />}
                  </button>
                  <button
                    onClick={downloadContent}
                    className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"
                    title="Download content"
                  >
                    <Download size={20} />
                  </button>
                </>
              )}
              <button
                onClick={onClose}
                className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"
                title="Close"
              >
                <X size={20} />
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
            {loading ? (
              <div className="flex items-center justify-center py-20">
                <div className="text-center">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                  <p className="text-gray-400">Generating your {contentType}...</p>
                  <p className="text-sm text-gray-500 mt-2">This may take a few moments</p>
                </div>
              </div>
            ) : content ? (
              <div className="prose prose-invert max-w-none">
                <div 
                  className="text-gray-200 leading-relaxed"
                  dangerouslySetInnerHTML={{ __html: content.formattedContent }}
                />
              </div>
            ) : (
              <div className="text-center py-20">
                <p className="text-gray-400">Failed to generate content. Please try again.</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AgenticModeOverlay;
